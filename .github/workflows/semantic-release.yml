name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  semantic-release-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run tests
        run: go test -v ./...

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@24 \
            @semantic-release/git@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@8

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": false},
                    {"type": "style", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": false},
                    {"type": "ci", "release": false},
                    {"type": "chore", "release": false}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {"type": "feat", "section": "Features"},
                      {"type": "fix", "section": "Bug Fixes"},
                      {"type": "perf", "section": "Performance Improvements"},
                      {"type": "revert", "section": "Reverts"},
                      {"type": "refactor", "section": "Code Refactoring"},
                      {"type": "docs", "section": "Documentation", "hidden": false},
                      {"type": "style", "section": "Styles", "hidden": true},
                      {"type": "chore", "section": "Miscellaneous Chores", "hidden": true},
                      {"type": "test", "section": "Tests", "hidden": true},
                      {"type": "build", "section": "Build System", "hidden": true},
                      {"type": "ci", "section": "Continuous Integration", "hidden": true}
                    ]
                  }
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "echo ${nextRelease.version} > .version"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ],
            "tagFormat": "v${version}"
          }
          EOF

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Check if version was released
        id: check_version
        run: |
          if [ -f .version ]; then
            VERSION=$(cat .version)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "released=true" >> $GITHUB_OUTPUT
            echo "New version released: $VERSION"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "No new version released"
          fi

      - name: Run GoReleaser
        if: steps.check_version.outputs.released == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        if: steps.check_version.outputs.released == 'true'
        run: |
          echo "ðŸŽ‰ Successfully released version v${{ steps.check_version.outputs.version }}"
          echo "ðŸ“¦ Binaries built and published to GitHub Releases"
